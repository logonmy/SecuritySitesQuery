import logging
from urllib import request
from html.parser import HTMLParser

MALWARE_URL = 'http://www.malwaredomainlist.com/mdl.php'
logger = logging.getLogger('main')


class MalwareParser(HTMLParser):
    """
    解析http://www.malwaredomainlist.com的搜索结果页面
    """
    def __init__(self):
        super(MalwareParser, self).__init__()
        self.results = []
        self.row = {}      # 每一行的内容
        self.flag = 0      # 是否在某一行内部
        self.colCount = 0  # 区分每一列
        self.cell = ''     # 一个单元格的内容，用于忽略<wbr>标签
        self.dataType = {1: 'Date(UTC)', 2: 'Domain', 3: 'IP',
                         4: 'Reverse Lookup', 5: 'Description', 6: 'ASN'}

    def handle_starttag(self, tag, attrs):
        if tag == 'tr' and len(attrs) > 0 and attrs[0][0] == 'bgcolor':
            self.flag = 1
        if tag == 'td' and self.flag:
            self.cell = ''
            self.colCount += 1

    def handle_startendtag(self, tag, attrs):
        if tag == 'img' and self.colCount == 7:
            self.row['Country'] = attrs[3][1]  # 国家在<img>标签的title属性中，单独插入

    def handle_endtag(self, tag):
        if tag == 'tr' and self.flag:
            self.flag = 0
            self.colCount = 0
            self.results.append(self.row)  # 写入一行
            self.row = {}
        if tag == 'td' and self.flag:
            if self.colCount < 7:
                self.row[self.dataType[self.colCount]] = self.cell  # 写入一项

    def handle_data(self, data):
        if data.strip() == '-':
            self.cell = ''
        else:
            self.cell += data.strip()

    def get_results(self):
        return self.results


class MalwareSearch(object):
    """
    组装一个搜索用的URL并在线搜索，返回搜索结果列表
    """
    def __init__(self, colsearch='All', quantity='All', inactive='off'):
        self.colsearch = colsearch
        self.quantity = quantity
        self.inactive = inactive
        self.parser = MalwareParser()

    def get_url(self, keyword):
        return MALWARE_URL + '?search=' + keyword \
                            + '&colsearch=' + self.colsearch \
                            + '&quantity=' + self.quantity \
                            + '&inactive=' + self.inactive

    def search(self, keyword):
        try:
            logger.info('search from malware...')
            with request.urlopen(self.get_url(keyword)) as f:
                self.parser.feed(f.read().decode('utf-8'))
        except Exception:
            logger.error('download from malware failed', exc_info=True)
            print('从malware搜索失败,请检查网络')
            return []
        return self.parser.get_results()
